// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button renders styles properly 1`] = `
.c0 {
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  font-size: 14px;
  line-height: 1.5;
  font-weight: 500;
  border-radius: 4px;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  border: 0;
  -webkit-appearance: none;
  position: relative;
  -webkit-transition-property: background-color,border-color,color;
  transition-property: background-color,border-color,color;
  -webkit-transition-duration: 0.1s;
  transition-duration: 0.1s;
  -webkit-transition-timing-function: ease-in;
  transition-timing-function: ease-in;
  white-space: nowrap;
  text-overflow: ellipsis;
  min-width: 0;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  font-family: "Roboto",sans-serif;
  background-color: #2c4bff;
  color: #FFFFFF;
  padding-right: 16px;
  padding-left: 16px;
  height: 40px;
}

.c0:hover {
  -webkit-transition-property: background-color,border-color,color;
  transition-property: background-color,border-color,color;
  -webkit-transition-duration: 0.1s;
  transition-duration: 0.1s;
  -webkit-transition-timing-function: ease-in;
  transition-timing-function: ease-in;
}

.c0:active {
  top: 1px;
}

.c0:focus {
  box-shadow: 0 0 0 3px #ABB7FF;
  outline: 0;
}

.c0:hover {
  background-color: #1F35B3;
  color: #FFFFFF;
}

.c1 {
  margin-left: 0px;
}

<button
  className="c0"
  disabled={false}
  onClick={[Function]}
  size="medium"
  type="primary"
>
  <div
    className="c1"
  >
    Primary
  </div>
</button>
`;

exports[`Disabled button is disabled 1`] = `
.c0 {
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  font-size: 14px;
  line-height: 1.5;
  font-weight: 500;
  border-radius: 4px;
  cursor: not-allowed;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  border: 0;
  -webkit-appearance: none;
  position: relative;
  -webkit-transition-property: background-color,border-color,color;
  transition-property: background-color,border-color,color;
  -webkit-transition-duration: 0.1s;
  transition-duration: 0.1s;
  -webkit-transition-timing-function: ease-in;
  transition-timing-function: ease-in;
  white-space: nowrap;
  text-overflow: ellipsis;
  min-width: 0;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  font-family: "Roboto",sans-serif;
  background-color: #E0E0E0;
  color: #77797a;
  padding-right: 16px;
  padding-left: 16px;
  height: 40px;
}

.c0:hover {
  -webkit-transition-property: background-color,border-color,color;
  transition-property: background-color,border-color,color;
  -webkit-transition-duration: 0.1s;
  transition-duration: 0.1s;
  -webkit-transition-timing-function: ease-in;
  transition-timing-function: ease-in;
}

.c0:active {
  top: 1px;
}

.c0:focus {
  box-shadow: 0 0 0 3px #ABB7FF;
  outline: 0;
}

.c1 {
  margin-left: 0px;
}

<button
  className="c0"
  disabled={true}
  size="medium"
  type="primary"
>
  <div
    className="c1"
  >
    Primary
  </div>
</button>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when array prop "items" has one item: "[object Object]" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when array prop "items" is an empty array: "[]" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when boolean prop "disabled" is set to: "false" 1`] = `
<ForwardRef
  disabled={false}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  onClick={[MockFunction]}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when boolean prop "fullWidth" is set to: "false" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={false}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when boolean prop "hasIconOnly" is set to: "false" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={false}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef
    hasIcon={true}
  >
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when boolean prop "isSelect" is set to: "false" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when boolean prop "isSplit" is set to: "false" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={false}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when boolean prop "loading" is set to: "false" 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when passed all props 1`] = `
<ForwardRef
  disabled={true}
  fullWidth={true}
  hasIconOnly={true}
  icon={<NodeFixture />}
  isSplit={true}
  size="small"
  type="link"
>
  <NodeFixture />
  <ForwardRef>
    jest-auto-snapshots String Fixture
  </ForwardRef>
  <ForwardRef
    alt="loading"
    src="./images/loading-gray.svg"
  />
</ForwardRef>
`;

exports[`jest-auto-snapshots > Button Matches snapshot when passed only required props 1`] = `
<ForwardRef
  disabled={false}
  fullWidth={false}
  hasIconOnly={false}
  onClick={[MockFunction]}
  size="medium"
  type="secondary"
>
  <ForwardRef
    hasIcon={false}
  />
</ForwardRef>
`;
